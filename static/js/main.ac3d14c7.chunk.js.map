{"version":3,"sources":["components/Fullpage.js","components/DownIcon.js","sections/TitleSection.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","DownIcon","onClick","style","display","flexDirection","alignItems","justifyContent","marginBottom","transform","cursor","src","icon","alt","maxWidth","TitleSection","backgroundColor","bgColor","name","data","title","subtitle","Object","keys","links","map","key","url","activeClass","to","spy","smooth","offset","duration","onSetActive","handleSetActive","icons","down","AboutSection","sections","items","p","content","SkillCard","skill","image","SkillSection","eachSkill","up","Navbar","App","state","colorNo","color","changeColor","i","colors","length","setState","bgColors","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac3d14c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Fullpage.css';\r\n\r\nclass Fullpage extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n        <div className={`fullpage ${this.props.className || ''}`}>\r\n            {children}\r\n        </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Fullpage\r\n","import React from \"react\";\r\n\r\nconst DownIcon = props => {\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        marginBottom: \"-50px\",\r\n        transform: \"translateY(-55px)\",\r\n        cursor: \"pointer\"\r\n      }}\r\n    >\r\n      <div>\r\n        <img src={props.icon} alt=\"\" style={{\r\n            maxWidth: \"40px\"\r\n        }}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DownIcon;\r\n","import React, {Component} from \"react\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport {SocialIcon} from \"react-social-icons\";\r\nimport DownIcon from '../components/DownIcon'\r\nimport {Link, Element} from 'react-scroll'\r\n\r\nimport data from \"../data.json\";\r\nimport \"./TitleSection.css\";\r\n\r\nclass TitleSection extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                backgroundColor: this.props.bgColor\r\n            }}>\r\n                <Element name=\"Title\" className=\"element\">\r\n                </Element>\r\n                <Fullpage className=\"first\">\r\n                    <h1 className=\"title\" >{data.title}</h1>\r\n                    <div>\r\n                        <h2>{data.subtitle}</h2>\r\n                    </div>\r\n                    <div className=\"icons-wrapper\">\r\n                        {Object.keys(data.links).map(key => {\r\n                            return (\r\n                                <div className=\"icon\">\r\n                                    <SocialIcon url={data.links[key]}/>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fullpage>\r\n                <Link activeClass=\"active\" to=\"About\" spy={true} smooth={true} offset={50} duration={500}\r\n                      onSetActive={this.handleSetActive}>\r\n                    <DownIcon icon={data.icons.down}/>\r\n                </Link>\r\n\r\n                <Element name=\"About\" className=\"element\">\r\n                </Element>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TitleSection;\r\n","import React, {Component} from \"react\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport data from \"../data.json\";\r\nimport \"./AboutSection.css\";\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport {Element, Link} from \"react-scroll\";\r\n\r\nclass AboutSection extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                backgroundColor: this.props.bgColor\r\n            }}>\r\n                <Fullpage className=\"second\">\r\n                    <h3>{data.sections[0].title}</h3>\r\n                    <div className=\"paragraphs\">\r\n                        {data.sections[0].items.map(p => {\r\n                            return <p>{p.content}</p>;\r\n                        })}\r\n                    </div>\r\n                </Fullpage>\r\n                <Link activeClass=\"active\" to=\"Skills\" spy={true} smooth={true} offset={50} duration={500}\r\n                      onSetActive={this.handleSetActive}>\r\n                    <DownIcon icon={data.icons.down}/>\r\n                </Link>\r\n\r\n                <Element name=\"Skills\" className=\"element\">\r\n                </Element>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutSection;\r\n","import React, { Component } from \"react\";\r\nimport './SkillCard.css';\r\n\r\nclass SkillCard extends Component {\r\n  render() {\r\n    const {skill} = this.props\r\n    return (\r\n      <div className=\"card\">\r\n      <div className=\"image-wrapper\">\r\n        <img src={skill.content.image} alt=\"\" />\r\n      </div>\r\n      <div className=\"skill-title-wrapper\">\r\n        <h4>{skill.content.title}</h4>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default SkillCard\r\n","import React, { Component } from \"react\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport SkillCard from \"../components/SkillCard\";\r\n\r\nimport data from \"../data.json\";\r\nimport \"./SkillSection.css\";\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport { Link } from 'react-scroll';\r\n\r\nclass SkillSection extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{\r\n        backgroundColor: this.props.bgColor\r\n      }}>\r\n        <Fullpage className=\"third\">\r\n          <h3>{data.sections[1].title}</h3>\r\n          <div className=\"cards-wrapper\">\r\n            {data.sections[1].items.map(eachSkill => {\r\n              return (\r\n                <SkillCard skill={eachSkill} />\r\n              );\r\n            })}\r\n          </div>\r\n        </Fullpage>\r\n        <Link activeClass=\"active\" to=\"Title\" spy={true} smooth={true} offset={50} duration={500}\r\n          onSetActive={this.handleSetActive}>\r\n          <DownIcon icon={data.icons.up} />\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SkillSection;\r\n","import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport { Link } from \"react-scroll\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navigation\">\r\n        <Link\r\n          activeClass=\"active\"\r\n          to=\"Skills\"\r\n          spy={true}\r\n          smooth={true}\r\n          offset={50}\r\n          duration={500}\r\n          onSetActive={this.handleSetActive}\r\n        >\r\n          <span>Skills</span>\r\n        </Link>\r\n\r\n        <Link\r\n          activeClass=\"active\"\r\n          to=\"About\"\r\n          spy={true}\r\n          smooth={true}\r\n          offset={50}\r\n          duration={500}\r\n          onSetActive={this.handleSetActive}\r\n        >\r\n          <span>About</span>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\n\nimport TitleSection from \"./sections/TitleSection\";\nimport AboutSection from \"./sections/AboutSection\";\nimport SkillSection from \"./sections/SkillSection\";\n\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\nimport data from \"./data\";\n\nclass App extends Component {\n  state = {\n    colorNo: 0,\n    color: \"black\",\n    bgColor: \"#ffffff\"\n  };\n  changeColor = () => {\n    let i = this.state.colorNo;\n    i = i === data.colors.length - 1 ? 0 : i + 1;\n    this.setState({\n      colorNo: i,\n      color: data.colors[i],\n      bgColor: data.bgColors[i]\n    });\n  };\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          color: this.state.color\n        }}\n      >\n        <img\n          className=\"artist\"\n          src=\"./img/artist.png\"\n          alt=\"Artist\"\n          title=\"Change Colors\"\n          onClick={() => this.changeColor()}\n        />\n\n        <Navbar />\n        <TitleSection bgColor={this.state.bgColor} />\n        <AboutSection bgColor={this.state.bgColor} />\n        <SkillSection bgColor={this.state.bgColor} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}